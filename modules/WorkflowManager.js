// WorkflowManager.js - Handles workflow generation and injection
// Depends on: Utils

class WorkflowManager {
  constructor() {
    this.checkForWorkflowToInject();
  }

  checkForWorkflowToInject() {
    const workflowToInject = localStorage.getItem('n9n_workflow_to_inject');
    if (workflowToInject) {
      try {
        const workflowData = JSON.parse(workflowToInject);
        console.log('Found workflow to inject on page load:', workflowData);
        
        // Clear the stored data
        localStorage.removeItem('n9n_workflow_to_inject');
        
        // Wait a bit for the page to load, then try to inject
        setTimeout(() => {
          this.attemptAutoInject(workflowData);
        }, 2000);
        
      } catch (error) {
        console.error('Failed to parse stored workflow data:', error);
        localStorage.removeItem('n9n_workflow_to_inject');
      }
    }
  }

  async attemptAutoInject(workflowData) {
    try {
      // Try DOM-based injection on the new workflow page
      const injected = await this.injectViaDOM(workflowData);
      
      if (injected) {
        console.log('Auto-injection successful!');
        Utils.showNotification('✅ Workflow injected successfully!');
      } else {
        console.log('Auto-injection failed, copying to clipboard');
        const success = await Utils.copyToClipboard(JSON.stringify(workflowData, null, 2));
        if (success) {
          Utils.showNotification('⚠️ Auto-inject failed. Workflow copied to clipboard - paste it manually.');
        } else {
          Utils.showNotification('❌ Auto-injection and clipboard copy both failed.');
        }
      }
      
    } catch (error) {
      console.error('Auto-injection error:', error);
      Utils.showNotification('❌ Auto-injection failed');
    }
  }

  generateWorkflowResponse(userMessage) {
    // Get selected model from dropdown (if exists)
    const modelSelector = document.querySelector('#model-selector');
    const selectedModel = modelSelector ? modelSelector.value : 'claude-4-sonnet';
    
    // Generate workflow based on user request
    const workflow = this.generateSmartWorkflow(userMessage, selectedModel);
    
    return {
      id: Date.now().toString() + '_ai',
      role: 'assistant',
      content: `I'll help you create that workflow! Here's a custom n8n workflow for: "${userMessage}"

\`\`\`json
${JSON.stringify(workflow, null, 2)}
\`\`\`

**Using:** ${selectedModel} • Click **⚡ Inject into n8n** to add this workflow directly to your n8n instance!`,
      timestamp: new Date().toISOString()
    };
  }

  generateSmartWorkflow(userMessage, selectedModel = 'claude-4-sonnet') {
    const message = userMessage.toLowerCase();
    
    // Generate workflow based on user request
    if (message.includes('print') && message.includes('date')) {
      return this.createDatePrintWorkflow(userMessage, selectedModel);
    } else if (message.includes('email') && message.includes('daily')) {
      return this.createDailyEmailWorkflow(userMessage, selectedModel);
    } else if (message.includes('sync') && (message.includes('sheet') || message.includes('airtable'))) {
      return this.createSyncWorkflow(userMessage, selectedModel);
    } else if (message.includes('webhook')) {
      return this.createWebhookWorkflow(userMessage, selectedModel);
    } else if (message.includes('schedule') || message.includes('cron')) {
      return this.createScheduledWorkflow(userMessage, selectedModel);
    } else {
      return this.createGenericWorkflow(userMessage, selectedModel);
    }
  }

  createDatePrintWorkflow(userMessage, selectedModel) {
    return {
      name: `AI: Print Today's Date`,
      description: `Generated by ${selectedModel} for: "${userMessage}"`,
      nodes: [
        {
          id: "manual-trigger",
          type: "n8n-nodes-base.manualTrigger",
          name: "Manual Trigger",
          position: [200, 300],
          parameters: {}
        },
        {
          id: "get-date",
          type: "n8n-nodes-base.function",
          name: "Get Today's Date",
          position: [400, 300],
          parameters: {
            functionCode: "// Get today's date in a nice format\nconst today = new Date();\nconst options = { \n  year: 'numeric', \n  month: 'long', \n  day: 'numeric',\n  weekday: 'long'\n};\n\nconst formattedDate = today.toLocaleDateString('en-US', options);\n\nreturn [{\n  json: {\n    date: formattedDate,\n    timestamp: today.toISOString(),\n    message: `Today is ${formattedDate}`\n  }\n}];"
          }
        }
      ],
      connections: {
        "Manual Trigger": {
          main: [[{"node": "Get Today's Date", "type": "main", "index": 0}]]
        }
      }
    };
  }


  // Placeholder methods for other workflow types
  createSyncWorkflow(userMessage, selectedModel) {
    return this.createGenericWorkflow(userMessage, selectedModel);
  }

  createWebhookWorkflow(userMessage, selectedModel) {
    return this.createGenericWorkflow(userMessage, selectedModel);
  }

  createScheduledWorkflow(userMessage, selectedModel) {
    return this.createGenericWorkflow(userMessage, selectedModel);
  }

  // Workflow copying functionality
  async copyWorkflow(messageId, messages) {
    try {
      const message = messages.find(m => m.id === messageId);
      if (message) {
        const jsonMatch = message.content.match(/```json\n([\s\S]*?)\n```/);
        if (jsonMatch) {
          const success = await Utils.copyToClipboard(jsonMatch[1]);
          if (success) {
            Utils.showNotification('✅ Workflow copied to clipboard!');
          } else {
            Utils.showNotification('❌ Failed to copy workflow');
          }
        }
      }
    } catch (error) {
      Utils.showNotification('❌ Failed to copy workflow');
    }
  }

  // Workflow injection - delegated to APIManager
  async injectWorkflow(messageId, messages, apiManager) {
    try {
      const message = messages.find(m => m.id === messageId);
      if (message) {
        const jsonMatch = message.content.match(/```json\n([\s\S]*?)\n```/);
        if (jsonMatch) {
          const workflowData = JSON.parse(jsonMatch[1]);
          
          // Show loading state
          Utils.showNotification('⚡ Injecting workflow into n8n...');
          
          // Try different injection methods via APIManager
          const injected = await apiManager.tryInjectWorkflow(workflowData);
          
          if (injected) {
            Utils.showNotification('✅ Workflow successfully injected into n8n!');
          } else {
            Utils.showNotification('⚠️ Could not auto-inject. Workflow copied to clipboard instead.');
            await Utils.copyToClipboard(jsonMatch[1]);
          }
        }
      }
    } catch (error) {
      console.error('Inject workflow error:', error);
      Utils.showNotification('❌ Failed to inject workflow');
    }
  }

  async injectViaDOM(workflowData, importButton = null) {
    try {
      // Find import button if not provided
      if (!importButton) {
        importButton = document.querySelector('[data-test-id="import-workflow-button"]') || 
                     document.querySelector('button[title*="import"]') ||
                     document.querySelector('button[title*="Import"]') ||
                     Utils.findButtonByText('Import');
      }

      if (!importButton) return false;

      // Click import button and try to paste data
      importButton.click();
      
      // Wait for import dialog
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Look for textarea or input field
      const textArea = document.querySelector('textarea[placeholder*="workflow"]') ||
                      document.querySelector('textarea[placeholder*="JSON"]') ||
                      document.querySelector('.import-textarea');
      
      if (textArea) {
        textArea.value = JSON.stringify(workflowData, null, 2);
        textArea.dispatchEvent(new Event('input', { bubbles: true }));
        
        // Try to find and click import/confirm button
        const confirmButton = document.querySelector('button[data-test-id="import-workflow-confirm"]') ||
                             document.querySelector('button:contains("Import")') ||
                             document.querySelector('.import-confirm-button');
        
        if (confirmButton) {
          confirmButton.click();
          return true;
        }
      }
      
      return false;
      
    } catch (error) {
      console.error('DOM injection failed:', error);
      return false;
    }
  }
}

// Export for use in other modules
window.WorkflowManager = WorkflowManager;